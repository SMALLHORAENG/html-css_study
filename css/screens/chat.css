#chat-screen{
    background-color: #abc1d1;
    height: 500vh;   
}

#chat-screen .alt-header,
#chat-screen .statusbar{
    top:0;
    position: fixed;
    width: 100%;
    box-sizing: border-box;
    background-color: #abc1d1;
}

#chat-screen .statusbar{
    z-index: 2;
}

#chat-screen .alt-header{
    top: 10px;
    z-index: 1;
}

/* 6.38
    아래 fadeIn 코드는 아래에서 위로 올라오면서 보이게 되는 코드
*/

@keyframes fadeIn {
    from{
        transform: translateY(30px);
        opacity: 0;
    }
    to{
        transform: none;
        opacity: 1;
    }
}

.main-chat{
    margin-top: 180px;
    display: flex;
    flex-direction: column;
    align-items: center;

    animation: fadeIn 0.8s linear;
}

/* 6.28
    백그라운드 색상만 바꿈 두번쨰 파트부터 본격적
*/

/* 6.29
    alt-screen-header.css에서 아이콘 margin-left 값 20px 줌

    #chat-screen .alt-header{
        안에 fixed인 position은 화면을 스크롤해도 그 위치가 변하지 않는 것
        width를 해주면 title과 아이콘들이 제 위치에 배치됨(fixed를 해줬기 때문에 해줘야 함)
        box-sizing값을 border-box로 해줬기 때문에 아이콘이 밖으로 벗어나지 않게 됨
        * #chat-screen .alt-header은 id chat-screen 곳에 alt-header인 클래스를
        의미함 *

    alt-screen-header.css 에 꿀팁을 추가함 (텍스트와 아이콘 위치 정확하게 하기)
    
    alt-header이 statusbar를 가리면 z-index라는 속성을 통해 수정
    z-index는 div가 있는 위치가 맨 앞에서부터 몇 번째인지 나타냄
    즉, layer의 순서가 몇번쨰인지 나타내는 것
    display , position 작업시 layer 갖는 것
    기본값은 0
    z-index는 포토샵의 layer와 같은 느낌이고
    절대적인 위치 absolute position이나 
    고정된 위치 fixed position에 대해서 설정 가능
    
    사용자와 가까움 0 사용자와 멀어짐 / 숫자가 높을수록 가깝게 위치한다
    3   2   1       0       -1  -2  -3

    321 0 -1-2-3 이라면 3이 가장 사용자와 가까운 가장 위의 layer -3은 가장 먼 layer
 */

.chat__timestemp{
    color: white;
    background-color: #92a4b2;
    padding: 15px;
    border-radius: 25px;
    font-size: 14px;
    margin-bottom: 25px;
}


/* 6.30
    timestemp 부분 완성
*/

.message-row{
    width: 100%;
    display: flex;
    margin-bottom: 25px;

    /* 개인적인 추가 9.12 수정하기 */
    /* transition: all 0.3s ease-in-out; */
}

/* 개인추가 */
/* .message-orw .message-row__content {
    opacity: 0;
    transform: rotateX(-30px);
} */

.message-row img{
    width: 50px;
    height: 50px;
    border-radius: 50%;
    margin-left: 3px;
    margin-right: 15px;
}

.message__author{
    font-weight: bold;
    font-size: 18px;
    margin-bottom: 5px;
    display: block;
}

.message__info{
    display: flex;
    align-items: flex-end;
}

.message__bubble{
    background-color: white;
    padding: 13px;
    font-size: 18px;
    border-radius: 15px;
    border-top-left-radius: 0px;
    margin-right: 5px;
}

.message__time{
/* .message__author{ */
    opacity: 0.8;
    font-size: 15px;
}

/* 6.31
    message-row부분을 display flex를 해주므로 요소들이 옆에 오게됨

    message-author은 span이므로 display를 block로 변경해줘야 함

    말풍선(bubble)옆 시간(time)이 말풍선 하단에 위치하게 해야 함
    말풍선과 시간에 해당하는 container인 info가 flex를 갖게할 것
    이후 align-items을 flex-end

    border-top-left-radius: 0px; 해주면 말풍선 좌측 상단은 각지게 됨(radius값0)
*/

.message-row--own {
    justify-content: flex-end;
}

.message-row--own .message__bubble{
    background-color: var(--yellow);
    border-top-right-radius: 0px;
    border-top-left-radius: 15px;
    margin-right: 0;
    margin-left: 5px;
}

/*.message-row--own .message__bubble {
    order: 1;
}
.message-row--own .message__time {
    order: 0;
}*/

.message-row--own .message__info{
    flex-direction: row-reverse;
}

/* 6.32
    flex children에만 order이 적용됨
    숫자가 클수록 우측에 위치함
    (순서를 바꾸는 방식 1)

    .message-row--own .message__info {
        flex-direction: row-reverse; }
        를 이용해도 위치 바뀜
    (순서를 바꾸는 방식 2) 
    .message-row--own인 modifier기준으로 변경
*/

.reply {
    position: fixed;
    bottom: 0;
    width: 100%;
    background-color: white;
    display: flex;
    justify-content: space-between;
    padding: 5px 25px;
    box-sizing: border-box;
    align-items: center;
    transition: transform .3s ease-in-out;
}

.reply .reply__column:first-child{
    width: 10%;
}
.reply .reply__column:last-child{
    width: 90%;
    position: relative;
}

.reply i{
    opacity: 0.5;
}

.reply input{
    padding: 14px;
    width: 100%;
    border: var(--main-border);
    border-radius: 25px;
    box-sizing: border-box;
    transition: all 0.3s ease-in-out;
}

.reply__column:last-child > i ,
.reply__column:last-child button {
    position: absolute;
    right: 3px;
    top: 2px;
}

.reply__column:last-child > i {
    right: 50px;
    top: 8px;
}

.reply__column button{
    background-color: var(--yellow);
    border: none;
    width: 40px;
    height: 40px;
    border-radius: 50%;
}

.reply__column button:focus,
.reply__column button:active{
    outline: none;
}

.reply__column button i{
    opacity: 1;
}

/* 6.33
    .reply input{
    height: 30px;
    width: 100%;
    } 이 코드는 안된다 왜냐? input이 column안에 있는데
    column은 width를 갖고있지 않음

    위 수정된 코드를 보면 먼저 column에 width를 줘야함
    그 다음에야 input에 width를 줄 수 있음

    두 아이콘은 absolute로 할 것
    아이콘, 버튼은 input의 위에 올릴 것
    input 부분을 relative로 만들어주면 됨(position)
*/

/* .reply:focus-within .reply__column:first-child {
    display: none;
    /* visibility: hidden; /
} */

.reply .reply__column:first-child,
.reply .fa-smile,
.reply button {
    transition: opacity 0.3s ease-in-out;
}
/* 버튼 부드럽게 사라지게 하기위한 transition */

.reply:focus-within .reply__column:first-child,
.reply:focus-within .fa-smile,
.reply:focus-within button {
    opacity: 0;
}
/* 아이콘을 안보이게 하기 위한 opacity */

.reply:focus-within input {
    width: 98vw;
    transform: translateX(-13%) translateY(-80px);
}

.reply:focus-within {
    transform: translateY(80px);
}


/* 6.38
    :focus-within -focus 됐는지 알수있게 해줌-

    .reply:focus-within
    reply 내부에 어떤 element가 focus되어 있다면 이라는 의미

    .reply:focus-within .reply__column:first-child{
        는 reply안에 element가 focus 되있다면 참이되어
        column:first-child에 적용됨

    input 부분에
    transition: all .3s ease-in-out;
    해주면 변하는 부분 부드럽게 볼 수 있음

    .reply:focus-within input {
    width: 98vw;
    transform: translateX(-10%);}   
    
    -reply가 focus 되면 input의 width가 95w가 되고
    위치가 X-10% 만큼 이동됨
    -10%인 이유는 first-child 값이 10% 되있음 (플러스버튼)

    transition 을 사용해야 애니메이션이 부드럽게 이어짐 아니면 뚝 끊겨보임

    input 부분만 나오게 하는방법은
    reply:focus-within 부분에 transsform: translateY(80px);
    해준뒤 input에서 translateY(-80px)를 추가적으로 해준다
    80px는 화면에 나오는 reply 창 크기
    - 80px 부분인 reply는 아래로 내려가고 -80px인 input은 위로 올라온다 -

    *translate의 값은 +값은 아래로 이동, -값은 위로 이동이다*
<<<<<<< HEAD
*/


/* 7.0
        웹 사이트 배포전에 할 것
        git의 branch
        개념설명 : git에서 코드들의 평행세계라 볼 수 있음

        git은 어떤 commit이라도 받을 수 있게 해줌
        master branch와는 또 다른 프로젝트를 어떤 commit 이라도 거기서 시작가능
        대부분의 사람들은 master branch에 stable(잘 작동하는 것으로 어느정도 검증 된)코드를 올림

        https://hoony-gunputer.tistory.com/entry/9-git-branch (사진보며 이해)
        사진에서 보면 하나의 commit에서 세갈래로 나눠짐 branch1, master, branch2
        각자 다른 역할을 하기 위해서 사용
        따로 만들었다가 합치는것도 가능함 (따로 실험하기위해 새로운 branch를 만들었다던가)

        실험 또는 새로운 기능 추가할 떄 새로운 branch를 만듦
        (평행세계를 만드는 것과 비슷함)
        
        작업을 다 하면 merge하면 됨 (달라진 것 합치는 것)

        github desktop에서 branch 를 새로 만들어준다 (branch 명 : experimental)
        이 안에는 main의 history가 담겨있음
        
*/        이 안에는 main의 history가 담겨있음     
